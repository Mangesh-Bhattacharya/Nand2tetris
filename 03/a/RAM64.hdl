// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

// Mangesh Bhattacharya | 039-251-145
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=A, b=B, c=C, d=D, e=E, f=F, g=G, h=H);   // DMux8Way to allow 8 pins for RAM
        
        RAM8(in=in, load=A, address=address[0..2], out=outA);                      // 8 RAM8s' that is equal to 8*8=64
        RAM8(in=in, load=B, address=address[0..2], out=outB);
        RAM8(in=in, load=C, address=address[0..2], out=outC);
        RAM8(in=in, load=D, address=address[0..2], out=outD);
        RAM8(in=in, load=E, address=address[0..2], out=outE);
        RAM8(in=in, load=F, address=address[0..2], out=outF);
        RAM8(in=in, load=G, address=address[0..2], out=outG);
        RAM8(in=in, load=H, address=address[0..2], out=outH);                     // "In" is input & output is input for MUX8Way which will be displayed below
        
    Mux8Way16(a=outA, b=outB, c=outC, d=outD, e=outE, f=outF, g=outG, h=outH, sel=address[3..5], out=out);
}