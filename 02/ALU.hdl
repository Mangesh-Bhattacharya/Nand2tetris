////////////////////////////////////////////////////////////////////////////////////////////////

//  Name: Mangesh Bhattacharya 
//  Course: Computer Fundamentals
//  Code: DCN 250
//  Inst: Dr. Yousef Ashibani

////////////////////////////////////////////////////////////////////////////////////////////////

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
        Mux16(a=x, sel=zx ,out= zdx);   //MUX16 Gate input is x, output is zdx
        Not16(in=zdx, out=notx);  //NOT 16 Gate input is zdx and output is NOTX
        Mux16(a=zdx, b=notx, sel=nx, out=ndx); //MUX16 Gate inputs from above are merged in a single MUX16 Gate

        Mux16(a=y, sel=zy, out=zdy); //Mux16 Gate input is y, & output is zdy
        Not16(in=zdy, out=noty); //NOT16 Gate
        Mux16(a=zdy, b=noty, sel=ny, out=ndy); //Mux16 Gate

        Add16(a=ndx, b=ndy, out=xplusy); //Add16 Gate
        And16(a=ndx, b=ndy, out=xandy); //Again Add16 Gate
        Mux16(a=xandy, b=xplusy, sel=f, out=fxy); //MUX16 Gate

        Not16(in=fxy , out=nfxy); //NOT16 Gate
        Mux16(a=fxy, b=nfxy, sel=no, out=out, out[15]=inng, out[0..7]=out7, out[8..15]=out15); //MUX16 Gate

        Or8Way(in=out7, out=zr0); //Or8Way Gate
        Or8Way(in=out15, out=zr1); // Again Or8Way Gate
        Or(a=zr0, b=zr1, out=zr2); // Or Gate
        Not(in=zr2, out=zr); //Not Gate

        And(a=inng, b=true, out=ng); // And Gate that later takes input from MUX16 last gate & output is ng
}
